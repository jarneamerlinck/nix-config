# Auto-generated using compose2nix v0.2.3-pre.
{ pkgs, lib, config, ... }:
let url = "portainer.${config.networking.hostName}.ko0.net";

in {

  # Containers
  virtualisation.oci-containers.containers."portainer" = {
    image = "docker.io/portainer/portainer-ce:2.35.0";
    volumes = [
      "/var/run/docker.sock:/var/run/docker.sock:rw"
      "/data/docker/portainer:/data:rw"
    ];

    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.portainer-rtr.entrypoints" = "https";
      "traefik.http.routers.portainer-rtr.rule" = "Host(`${url}`)";
      "traefik.http.routers.portainer-rtr.service" = "portainer-svc";
      "traefik.http.routers.portainer-rtr.tls" = "true";
      "traefik.http.routers.portainer-rtr.tls.certresolver" = "cloudflare";
      "traefik.http.services.portainer-svc.loadbalancer.server.port" = "9000";

      # Edge
      "traefik.http.routers.portainer-backbone-rtr.entrypoints" = "https";
      "traefik.http.routers.portainer-backbone-rtr.rule" =
        "Host(`portainer-backbone.${config.networking.hostName}.ko0.net`)";
      "traefik.http.routers.portainer-backbone-rtr.service" =
        "portainer-backbone-svc";
      "traefik.http.routers.portainer-backbone-rtr.tls" = "true";
      "traefik.http.routers.portainer-backbone-rtr.tls.certresolver" =
        "cloudflare";
      "traefik.http.services.portainer-backbone-svc.loadbalancer.server.port" =
        "8000";
    };
    # ports = [
    #   "8000:8000/tcp"
    #   "9443:9443/tcp"
    # ];
    log-driver = "journald";
    extraOptions = [ "--network-alias=frontend" "--network=frontend" ];
  };
  systemd.services."docker-portainer" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [ "docker-network-frontend.service" ];
    requires = [ "docker-network-frontend.service" ];
    partOf = [ "docker-compose-portainer-root.target" ];
    wantedBy = [ "docker-compose-portainer-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-portainer-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
