{
  lib,
  ...
}:

{
  # Containers
  virtualisation.oci-containers.containers."drawio-drawio" = {
    image = "docker.io/jgraph/drawio:28.2.0";
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.drawio-rtr.entrypoints" = "https";
      "traefik.http.routers.drawio-rtr.rule" = "Host(`drawio.ko0.net`)";
      "traefik.http.routers.drawio-rtr.service" = "drawio-svc";
      "traefik.http.routers.drawio-rtr.tls" = "true";
      "traefik.http.routers.drawio-rtr.tls.certresolver" = "cloudflare";
      "traefik.http.services.drawio-svc.loadbalancer.server.port" = "8080";
    };
    log-driver = "journald";
    extraOptions = [
      "--cpus=0.5"
      "--memory=500MB"
      "--network-alias=drawio"
      "--network=frontend"
    ];
  };
  systemd.services."docker-drawio-drawio" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    partOf = [
      "docker-compose-drawio-root.target"
    ];
    wantedBy = [
      "docker-compose-drawio-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-drawio-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
