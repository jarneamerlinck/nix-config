{ pkgs, lib, config,  ... }:

{
  sops.secrets."search/env" = {
    sopsFile = ../../../${config.networking.hostName}/secrets.yml;
    neededForUsers = true;
  };

  # Containers
  virtualisation.oci-containers.containers."searxng" = {
    image = "docker.io/searxng/searxng:2025.4.24-33729439c";
    environmentFiles = [
      "/run/secrets-for-users/search/env"
    ];

    environment = {
    };
    volumes = [ "/data/docker/search/:/etc/searxng:rw" ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.routers.search-rtr.entrypoints" = "https";
      "traefik.http.routers.search-rtr.rule" = "Host(`search.ko0.net`)";
      "traefik.http.routers.search-rtr.service" = "search-svc";
      "traefik.http.routers.search-rtr.tls" = "true";
      "traefik.http.routers.search-rtr.tls.certresolver" = "cloudflare";
      "traefik.http.services.search-svc.loadbalancer.server.port" = "8080";
    };
    log-driver = "journald";
    extraOptions = [
      "--cap-add=CHOWN"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--network-alias=searxng"
      "--network=frontend"
      "--network=search_searxng"
    ];
  };
  systemd.services."docker-searxng" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [ "docker-network-search_searxng.service" ];
    requires = [ "docker-network-search_searxng.service" ];
    partOf = [ "docker-compose-search-root.target" ];
    wantedBy = [ "docker-compose-search-root.target" ];
  };


  virtualisation.oci-containers.containers."redis" = {
    image = "docker.io/valkey/valkey:8-alpine";
    volumes = [ "search_valkey-data2:/data:rw" ];
    cmd = [
      "valkey-server"
      "--save"
      "30"
      "1"
      "--loglevel"
      "warning"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=DAC_OVERRIDE"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--network-alias=redis"
      "--network=search_searxng"
    ];
  };
  systemd.services."docker-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-search_searxng.service"
      "docker-volume-search_valkey-data2.service"
    ];
    requires = [
      "docker-network-search_searxng.service"
      "docker-volume-search_valkey-data2.service"
    ];
    partOf = [ "docker-compose-search-root.target" ];
    wantedBy = [ "docker-compose-search-root.target" ];
  };

  # Networks
  systemd.services."docker-network-search_searxng" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f search_searxng";
    };
    script = ''
      docker network inspect search_searxng || docker network create search_searxng
    '';
    partOf = [ "docker-compose-search-root.target" ];
    wantedBy = [ "docker-compose-search-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-search_valkey-data2" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect search_valkey-data2 || docker volume create search_valkey-data2
    '';
    partOf = [ "docker-compose-search-root.target" ];
    wantedBy = [ "docker-compose-search-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-search-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
