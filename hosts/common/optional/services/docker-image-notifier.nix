{ pkgs, lib, config,  ... }:

{
  sops.secrets."docker-notifier/env" = {
    sopsFile = ../../../common/secrets.yml;
    neededForUsers = true;
  };
  # Containers
  virtualisation.oci-containers.containers."diun" = {
    image = "crazymax/diun:4.28.0";
    volumes = [
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    environmentFiles = [
      "/run/secrets-for-users/docker-notifier/env"
    ];
    labels = {
      "diun.enable" = "true";
    };
    log-driver = "journald";
  };
  systemd.services."docker-diun" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-docker-notifier-root.target"
    ];
    wantedBy = [
      "docker-compose-docker-notifier-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-docker-notifier-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
