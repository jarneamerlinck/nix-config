{ pkgs, lib, config, ... }:
{
  
  sops.secrets."traefik/env" = {
    sopsFile = ../../../${config.networking.hostName}/secrets.yml;
    neededForUsers = true;
  };
  # Containers
  virtualisation.oci-containers.containers."traefik" = {
  image = "traefik:v3.2.1";
    environmentFiles = [
      "/run/secrets-for-users/traefik/env"
    ];
    volumes = [
      "/data/docker/traefik/letsencrypt:/letsencrypt:rw"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "80:80/tcp"
      "443:443/tcp"
    ];
    cmd = [
      "--api.insecure=true"
      "--providers.docker=true"
      "--providers.docker.exposedbydefault=false"
      "--entryPoints.web.address=:80"
      "--entryPoints.websecure.address=:443"
      "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      "--certificatesresolvers.cloudflare.acme.email=jarneamerlinck@pm.me"
      "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
      "traefik.http.routers.dash.rule=Host(`dash.vm1.ko0.net`)"
      "traefik.http.routers.dash.entrypoints=websecure"
      "traefik.http.routers.dash.tls.certresolver=cloudflare" 
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=traefik"
      "--network=frontend"
    ];
  };
  systemd.services."docker-traefik" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-frontend.service"
    ];
    requires = [
      "docker-network-frontend.service"
    ];
    partOf = [
      "docker-compose-traefik-root.target"
    ];
    wantedBy = [
      "docker-compose-traefik-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-frontend" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f frontend";
    };
    script = ''
      docker network inspect frontend || docker network create frontend
    '';
    partOf = [ "docker-compose-traefik-root.target" ];
    wantedBy = [ "docker-compose-traefik-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-traefik-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
