{ pkgs, lib, config,  ... }:

{
  # Containers
  virtualisation.oci-containers.containers."excalidraw-excalidraw" = {
    image = "excalidraw/excalidraw:sha-4bfc5bb";
    labels = {
      "traefik.enable" = "false";
      "traefik.http.routers.excalidraw-rtr.entrypoints" = "https";
      "traefik.http.routers.excalidraw-rtr.rule" = "Host(`excalidraw.ko0.net`)";
      "traefik.http.routers.excalidraw-rtr.service" = "excalidraw-svc";
      "traefik.http.routers.excalidraw-rtr.tls" = "true";
      "traefik.http.routers.excalidraw-rtr.tls.certresolver" = "cloudflare";
      "traefik.http.services.excalidraw-svc.loadbalancer.server.port" = "8080";
    };
    ports = [
      "8080:8080/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cpus=0.5"
      "--memory=500MB"
      "--network-alias=excalidraw"
      "--network=frontend"
    ];
  };
  systemd.services."docker-excalidraw" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    partOf = [
      "docker-compose-excalidraw-root.target"
    ];
    wantedBy = [
      "docker-compose-excalidraw-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-excalidraw-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
